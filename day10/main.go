package main

import "fmt"

func main() {
	xs := []int{1, 1}
	last := func() int {
		return xs[len(xs)-1]
	}

	addx := func(d int) {
		xs = append(xs, last(), last()+d)
	}
	noop := func() {
		xs = append(xs, last())
	}

	addx(1)
	noop()
	noop()
	noop()
	addx(5)
	addx(5)
	noop()
	noop()
	addx(9)
	addx(-5)
	addx(1)
	addx(4)
	noop()
	noop()
	noop()
	addx(6)
	addx(-1)
	noop()
	addx(5)
	addx(-2)
	addx(7)
	noop()
	addx(3)
	addx(-2)
	addx(-38)
	noop()
	noop()
	addx(32)
	addx(-22)
	noop()
	addx(2)
	addx(3)
	noop()
	addx(2)
	addx(-2)
	addx(7)
	addx(-2)
	noop()
	addx(3)
	addx(2)
	addx(5)
	addx(2)
	addx(-5)
	addx(10)
	noop()
	addx(3)
	noop()
	addx(-38)
	addx(1)
	addx(27)
	noop()
	addx(-20)
	noop()
	addx(2)
	addx(27)
	noop()
	addx(-22)
	noop()
	noop()
	noop()
	noop()
	addx(3)
	addx(5)
	addx(2)
	addx(-11)
	addx(16)
	addx(-2)
	addx(-17)
	addx(24)
	noop()
	noop()
	addx(1)
	addx(-38)
	addx(15)
	addx(10)
	addx(-15)
	noop()
	addx(2)
	addx(26)
	noop()
	addx(-21)
	addx(19)
	addx(-33)
	addx(19)
	noop()
	addx(-6)
	addx(9)
	addx(3)
	addx(4)
	addx(-21)
	addx(4)
	addx(20)
	noop()
	addx(3)
	addx(-38)
	addx(28)
	addx(-21)
	addx(9)
	addx(-8)
	addx(2)
	addx(5)
	addx(2)
	addx(-9)
	addx(14)
	addx(-2)
	addx(-5)
	addx(12)
	addx(3)
	addx(-2)
	addx(2)
	addx(7)
	noop()
	noop()
	addx(-27)
	addx(28)
	addx(-36)
	noop()
	addx(1)
	addx(5)
	addx(-1)
	noop()
	addx(6)
	addx(-1)
	addx(5)
	addx(5)
	noop()
	noop()
	addx(-2)
	addx(20)
	addx(-10)
	addx(-3)
	addx(1)
	addx(3)
	addx(2)
	addx(4)
	addx(3)
	noop()
	addx(-30)
	noop()

	sum := 0
	for i := 20; i <= 220; i += 40 {
		sum += i * xs[i]
	}
	fmt.Println("part 1)", sum)

	fmt.Println("part 2)")
	xs = xs[1:]
	for y := 0; y < 6; y++ {
		for x := 0; x < 40; x++ {
			if x-1 <= xs[0] && xs[0] <= x+1 {
				fmt.Print("â–®")
			} else {
				fmt.Print(" ")
			}
			xs = xs[1:]

			if x%5 == 4 {
				fmt.Print(" ")
			}
		}
		fmt.Println()
	}
}
